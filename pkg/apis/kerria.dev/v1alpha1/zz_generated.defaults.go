//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Kerria

// Code generated by defaulter-gen. DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

func SetObjectDefaults_Lockfile(in *Lockfile) {
	if in.ObjectMeta.Labels == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.ObjectMeta.Labels); err != nil {
			panic(err)
		}
	}
	if in.ObjectMeta.Annotations == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.ObjectMeta.Annotations); err != nil {
			panic(err)
		}
	}
	if in.Spec.DefaultHash == "" {
		in.Spec.DefaultHash = "sha256"
	}
}

func SetObjectDefaults_Repository(in *Repository) {
	if in.ObjectMeta.Labels == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.ObjectMeta.Labels); err != nil {
			panic(err)
		}
	}
	if in.ObjectMeta.Annotations == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.ObjectMeta.Annotations); err != nil {
			panic(err)
		}
	}
	if in.Spec.Build.KustomizeFlags == nil {
		if err := json.Unmarshal([]byte(`["--enable-helm", "--enable-alpha-plugins", "--network"]`), &in.Spec.Build.KustomizeFlags); err != nil {
			panic(err)
		}
	}
	if in.Spec.Build.OutputPath == "" {
		in.Spec.Build.OutputPath = "builds"
	}
	for i := range in.Spec.Sources {
		a := &in.Spec.Sources[i]
		if a.Labels == nil {
			if err := json.Unmarshal([]byte(`{}`), &a.Labels); err != nil {
				panic(err)
			}
		}
		if a.Annotations == nil {
			if err := json.Unmarshal([]byte(`{}`), &a.Annotations); err != nil {
				panic(err)
			}
		}
	}
	for i := range in.Spec.Processors {
		a := &in.Spec.Processors[i]
		if a.Stage == "" {
			a.Stage = "None"
		}
		if a.Container.Network == false {
			a.Container.Network = false
		}
		if a.Container.MountGitRoot == false {
			a.Container.MountGitRoot = true
		}
		for j := range a.Container.AdditionalMounts {
			b := &a.Container.AdditionalMounts[j]
			if b.RW == false {
				b.RW = false
			}
		}
	}
}
