//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Kerria

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/meta.ObjectMeta":                 schema_pkg_apis_kerriadev_meta_ObjectMeta(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/meta.TypeMeta":                   schema_pkg_apis_kerriadev_meta_TypeMeta(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.BuildStatus":            schema_pkg_apis_kerriadev_v1alpha1_BuildStatus(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.Lockfile":               schema_pkg_apis_kerriadev_v1alpha1_Lockfile(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.LockfileSpec":           schema_pkg_apis_kerriadev_v1alpha1_LockfileSpec(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.LockfileStatus":         schema_pkg_apis_kerriadev_v1alpha1_LockfileStatus(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.Repository":             schema_pkg_apis_kerriadev_v1alpha1_Repository(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositoryBuildConfig":  schema_pkg_apis_kerriadev_v1alpha1_RepositoryBuildConfig(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositorySourceConfig": schema_pkg_apis_kerriadev_v1alpha1_RepositorySourceConfig(ref),
		"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositorySpec":         schema_pkg_apis_kerriadev_v1alpha1_RepositorySpec(ref),
	}
}

func schema_pkg_apis_kerriadev_meta_ObjectMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is primarily intended for creation idempotence and configuration definition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace defines the space within which each name must be unique.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a aap of string keys and values that can be used to organize and categorize (scope and select) objects.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_kerriadev_meta_TypeMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the resource this object represents.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"apiVersion", "kind"},
			},
		},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_BuildStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildStatus defines the state of a build at the time it was built",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"timestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Timestamp is the RFC 3339 timestamp for when the build was performed",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceHash": {
						SchemaProps: spec.SchemaProps{
							Description: "SourceHash is the source directory hash digest in the form of SourceHashType",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceHashType": {
						SchemaProps: spec.SchemaProps{
							Description: "SourceHashType is the type of hash used to compute the source digest",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourcePath": {
						SchemaProps: spec.SchemaProps{
							Description: "SourcePath is the path to the source directory used to create the build",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"buildHash": {
						SchemaProps: spec.SchemaProps{
							Description: "BuildHash is the build directory hash digest in the form of BuildHashType",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"buildHashType": {
						SchemaProps: spec.SchemaProps{
							Description: "BuildHashType is the type of hash used to compute the build digest",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"buildPath": {
						SchemaProps: spec.SchemaProps{
							Description: "BuildPath is the path to the build directory where the build output was written to",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"timestamp", "sourceHash", "sourceHashType", "sourcePath", "buildHash", "buildHashType", "buildPath"},
			},
		},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_Lockfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Lockfile is the current build state of the managed repository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the resource this object represents.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/meta.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.LockfileSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.LockfileStatus"),
						},
					},
				},
				Required: []string{"apiVersion", "kind", "metadata"},
			},
		},
		Dependencies: []string{
			"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/meta.ObjectMeta", "github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.LockfileSpec", "github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.LockfileStatus"},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_LockfileSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LockfileSpec represents the configuration for how to manage the lockfile",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultHash": {
						SchemaProps: spec.SchemaProps{
							Default: "sha256",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_LockfileStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LockfileStatus represents the current state of the lockfile",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"builds": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"sourcePath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Builds is a list of BuildStatus for all builds in the repository",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.BuildStatus"),
									},
								},
							},
						},
					},
				},
				Required: []string{"builds"},
			},
		},
		Dependencies: []string{
			"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.BuildStatus"},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_Repository(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Repository is the configuration API for a kerria-managed repository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the resource this object represents.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/meta.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositorySpec"),
						},
					},
				},
				Required: []string{"apiVersion", "kind", "metadata"},
			},
		},
		Dependencies: []string{
			"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/meta.ObjectMeta", "github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositorySpec"},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_RepositoryBuildConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RepositoryBuildConfig specifies how kerria should build and store manifests",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kustomizeFlags": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "KustomizeFlags are a list of additional flags to add to the `kustomize build` command",
							Default:     []interface{}{"--enable-helm", "--enable-alpha-plugins", "--network"},
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"outputPath": {
						SchemaProps: spec.SchemaProps{
							Description: "OutputPath is the directory kerria uses as the root of the build output tree",
							Default:     "builds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_RepositorySourceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RepositorySourceConfig describes how kerria should find source manifests",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is an optional name for the source",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"glob": {
						SchemaProps: spec.SchemaProps{
							Description: "Glob is a directory pattern for manifest sources",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"glob"},
			},
		},
	}
}

func schema_pkg_apis_kerriadev_v1alpha1_RepositorySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RepositorySpec is the specification for how kerria manages a repository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"build": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositoryBuildConfig"),
						},
					},
					"sources": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"path",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Sources is a list of RepositorySourceConfig to find source manifests",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositorySourceConfig"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositoryBuildConfig", "github.com/kerria-dev/kerria/pkg/apis/kerria.dev/v1alpha1.RepositorySourceConfig"},
	}
}
